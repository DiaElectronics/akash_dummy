
// Code generated by mtgroup-generator.
package app

import (
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/powerman/check"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!


func TestGetDeploy(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().GetDeployAccessManager(gomock.Any()).Return(true) 
		mockRepo.EXPECT().GetDeploy(gomock.Any(), gomock.Any()).Return(testDeploy1, nil)
		b, err := a.GetDeploy(profile, testDeploy1.ID)
		t.Nil(err)
		t.DeepEqual(testDeploy1, b)
}

func TestAddDeploy(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().AddDeployAccessManager(gomock.Any()).Return(true)
		mockRepo.EXPECT().AddDeploy(gomock.Any(), gomock.Any(), gomock.Any()).Return(testDeploy1, nil)
		b, err := a.AddDeploy(profile, testDeploy1)
		t.Nil(err)
		t.DeepEqual(testDeploy1, b)
}

func TestDeleteDeploy(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().DeleteDeployAccessManager(gomock.Any()).Return(true)
		mockRepo.EXPECT().DeleteDeploy(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)
		err := a.DeleteDeploy(profile, testDeploy1.ID)
		t.Nil(err)
}

func TestEditDeploy(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().EditDeployAccessManager(gomock.Any()).Return(true)
		mockRepo.EXPECT().EditDeploy(gomock.Any(), gomock.Any(), gomock.Any()).Return(testDeploy2, nil)
		b, err := a.EditDeploy(profile, testDeploy1.ID, testDeploy1)
		t.Nil(err)
			t.DeepEqual(testDeploy2, b)
}

func TestListDeploy(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().ListDeployAccessManager(gomock.Any()).Return(true)
		mockRepo.EXPECT().ListDeploy(gomock.Any(), gomock.Any()).Return(testDeploys, 2, []string{}, nil)
		b, count, _, err := a.ListDeploy(profile, listParams)
		t.Nil(err)
		t.Equal(2, count)
		t.DeepEqual(testDeploys, b)
}
