// Code generated by mtgroup-generator.
package app

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

// App provides application features service.
type App interface {
            GetDeploy(prof Profile, id string) (*Deploy, error)
            AddDeploy(prof Profile, m *Deploy) (*Deploy, error)
            DeleteDeploy(prof Profile, id string) error
            EditDeploy(prof Profile, id string, m *Deploy) (*Deploy, error)
            ListDeploy(prof Profile, params *ListParams) ([]*Deploy, int, []string, error)
	
            GetExample(prof Profile, id string) (*Example, error)
            AddExample(prof Profile, m *Example) (*Example, error)
            DeleteExample(prof Profile, id string) error
            EditExample(prof Profile, id string, m *Example) (*Example, error)
            ListExample(prof Profile, params *ListParams) ([]*Example, int, []string, error)
	
            GetTransaction(prof Profile, id string) (*Transaction, error)
            AddTransaction(prof Profile, m *Transaction) (*Transaction, error)
            DeleteTransaction(prof Profile, id string) error
            EditTransaction(prof Profile, id string, m *Transaction) (*Transaction, error)
            ListTransaction(prof Profile, params *ListParams) ([]*Transaction, int, []string, error)
	
            GetUser(prof Profile, id string) (*User, error)
            AddUser(prof Profile, m *User) (*User, error)
            DeleteUser(prof Profile, id string) error
            EditUser(prof Profile, id string, m *User) (*User, error)
            ListUser(prof Profile, params *ListParams) ([]*User, int, []string, error)
	

    
        AddTestData(prof Profile) error
    
}

// Repo interface for data repository
type Repo interface {
            GetDeploy(id string, isolatedEntityID string) (*Deploy, error)
            AddDeploy(profileID string, isolatedEntityID string, m *Deploy) (*Deploy, error)
            DeleteDeploy(id string, profileID string, isolatedEntityID string) error
            EditDeploy(id string, isolatedEntityID string, m *Deploy) (*Deploy, error)
            ListDeploy(isolatedEntityID string, params *ListParams) ([]*Deploy, int, []string, error)
	
            GetExample(id string, isolatedEntityID string) (*Example, error)
            AddExample(profileID string, isolatedEntityID string, m *Example) (*Example, error)
            DeleteExample(id string, profileID string, isolatedEntityID string) error
            EditExample(id string, isolatedEntityID string, m *Example) (*Example, error)
            ListExample(isolatedEntityID string, params *ListParams) ([]*Example, int, []string, error)
	
            GetTransaction(id string, isolatedEntityID string) (*Transaction, error)
            AddTransaction(profileID string, isolatedEntityID string, m *Transaction) (*Transaction, error)
            DeleteTransaction(id string, profileID string, isolatedEntityID string) error
            EditTransaction(id string, isolatedEntityID string, m *Transaction) (*Transaction, error)
            ListTransaction(isolatedEntityID string, params *ListParams) ([]*Transaction, int, []string, error)
	
            GetUser(id string, isolatedEntityID string) (*User, error)
            AddUser(profileID string, isolatedEntityID string, m *User) (*User, error)
            DeleteUser(id string, profileID string, isolatedEntityID string) error
            EditUser(id string, isolatedEntityID string, m *User) (*User, error)
            ListUser(isolatedEntityID string, params *ListParams) ([]*User, int, []string, error)
	

    

    AddTestData(profileID, isolatedEntityID string) error
}


    type ListParams struct {
        Offset       int64
        Limit        int64
        FilterGroups []*FilterGroup
        SortBy       string
        OrderBy      string
    }

    type FilterGroup struct {
        Key         string
        LogicFilter bool
        Filters     []*Filter
    }

    type Filter struct {
        Value      string
        Operator   string
        IgnoreCase bool
    }


type app struct {
	repo     Repo
	rulesSet RulesSet
}

func New(r Repo, rs RulesSet) (App) {
	return &app{
		repo: r,
        rulesSet: rs,
	}
}
    func (a *app) AddTestData(prof Profile) error {
        if !prof.Authz.Admin {
            return ErrAccessDenied
        }
        return a.repo.AddTestData(prof.ID, prof.IsolatedEntityID)
    }
