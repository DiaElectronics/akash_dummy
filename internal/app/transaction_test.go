
// Code generated by mtgroup-generator.
package app

import (
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/powerman/check"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!


func TestGetTransaction(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().GetTransactionAccessManager(gomock.Any()).Return(true) 
		mockRepo.EXPECT().GetTransaction(gomock.Any(), gomock.Any()).Return(testTransaction1, nil)
		b, err := a.GetTransaction(profile, testTransaction1.ID)
		t.Nil(err)
		t.DeepEqual(testTransaction1, b)
}

func TestAddTransaction(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().AddTransactionAccessManager(gomock.Any()).Return(true)
		mockRepo.EXPECT().AddTransaction(gomock.Any(), gomock.Any(), gomock.Any()).Return(testTransaction1, nil)
		b, err := a.AddTransaction(profile, testTransaction1)
		t.Nil(err)
		t.DeepEqual(testTransaction1, b)
}

func TestDeleteTransaction(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().DeleteTransactionAccessManager(gomock.Any()).Return(true)
		mockRepo.EXPECT().DeleteTransaction(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)
		err := a.DeleteTransaction(profile, testTransaction1.ID)
		t.Nil(err)
}

func TestEditTransaction(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().EditTransactionAccessManager(gomock.Any()).Return(true)
		mockRepo.EXPECT().EditTransaction(gomock.Any(), gomock.Any(), gomock.Any()).Return(testTransaction2, nil)
		b, err := a.EditTransaction(profile, testTransaction1.ID, testTransaction1)
		t.Nil(err)
			t.DeepEqual(testTransaction2, b)
}

func TestListTransaction(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockRepo := NewMockRepo(ctrl)
	rulesSet := NewMockRulesSet(ctrl)

	a := New(mockRepo, rulesSet)

	rulesSet.EXPECT().ListTransactionAccessManager(gomock.Any()).Return(true)
		mockRepo.EXPECT().ListTransaction(gomock.Any(), gomock.Any()).Return(testTransactions, 2, []string{}, nil)
		b, count, _, err := a.ListTransaction(profile, listParams)
		t.Nil(err)
		t.Equal(2, count)
		t.DeepEqual(testTransactions, b)
}
