// Code generated by mtgroup-generator.   
package api

import (
	"errors"
	"time"
	"demo/internal/def"
	"github.com/go-openapi/swag"

	"demo/internal/api/restapi/models"
	deploy "demo/internal/api/restapi/restapi/operations/deploy"
	"demo/internal/app"
		"demo/internal/types"

	extauthapi "github.com/mtgroupit/mt-mock-extauthapi"
		"github.com/go-openapi/strfmt"
	"github.com/go-openapi/runtime/middleware" 
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!
func (svc *service) GetDeploy(params deploy.GetDeployParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		c, err := svc.app.GetDeploy(toAppProfile(prof), params.Body.ID)
		switch {
		default:
			log.PrintErr("GetDeploy server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return deploy.NewGetDeployDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("GetDeploy client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return deploy.NewGetDeployDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("GetDeploy client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return deploy.NewGetDeployDefault(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("GetDeploy ok", "id", params.Body.ID)
			return deploy.NewGetDeployOK().WithPayload(apiDeploy(c))
		}
}
func (svc *service) AddDeploy(params deploy.AddDeployParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		c, err := svc.app.AddDeploy(toAppProfile(prof), appDeployAdd(params.Body))
		switch {
		default:
			log.PrintErr("AddDeploy server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return deploy.NewAddDeployDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("AddDeploy client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return deploy.NewAddDeployDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("AddDeploy ok")
			return deploy.NewAddDeployCreated().WithPayload(apiDeploy(c))
		}
}
func (svc *service) DeleteDeploy(params deploy.DeleteDeployParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		err := svc.app.DeleteDeploy(toAppProfile(prof), params.Body.ID)
		switch {
		default:
			log.PrintErr("DeleteDeploy server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return deploy.NewDeleteDeployDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("DeleteDeploy client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return deploy.NewDeleteDeployDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("DeleteDeploy client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return deploy.NewDeleteDeployDefault(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("DeleteDeploy ok", "id", params.Body.ID)
			return deploy.NewDeleteDeployNoContent()
		}
}
func (svc *service) EditDeploy(params deploy.EditDeployParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		c, err := svc.app.EditDeploy(toAppProfile(prof), params.Body.ID, appDeployAdd(params.Body.Data))
		switch {
		default:
			log.PrintErr("EditDeploy server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return deploy.NewEditDeployDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("EditDeploy client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return deploy.NewEditDeployDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("EditDeploy client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return deploy.NewEditDeployDefault(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("EditDeploy ok")
			return deploy.NewEditDeployOK().WithPayload(apiDeploy(c))
		}
}
func (svc *service) ListDeploy(params deploy.ListDeployParams, profile interface{}) middleware.Responder {
	prof := profile.(*extauthapi.Profile)
		c, count, warnings, err := svc.app.ListDeploy(toAppProfile(prof), appListParams(params.Body))
		switch {
		default:
			log.PrintErr("ListDeploy server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return deploy.NewListDeployDefault(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrAccessDenied):
			log.Info("ListDeploy client error", def.LogHTTPStatus, codeForbidden.status, "code", codeForbidden.extra, "err", err)
			return deploy.NewListDeployDefault(codeForbidden.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeForbidden.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("ListDeploy ok")
			return deploy.NewListDeployOK().WithPayload(&deploy.ListDeployOKBody{
				Items: apiDeploys(c),
				Warnings: warnings,
				Count: int32(count),
			})
		}
}
          



func apiDeploy(a *app.Deploy) *models.Deploy {
	if a == nil {
		return nil
	}
	return &models.Deploy{
			ID: a.ID,
			Config: a.Config,
			CpuUnits: a.CpuUnits.Float64(),
			CreatedAt: (*strfmt.DateTime)(a.CreatedAt),
			MemoryMb: a.MemoryMb,
			Name: a.Name,
			Price: a.Price.Float64(),
			State: a.State,
			StorageMb: a.StorageMb,
			User: apiUser(a.User),
	}
}

func apiDeploys(apps []*app.Deploy) []*models.Deploy {
	apis := []*models.Deploy{}
	for i := range apps {
		apis = append(apis, apiDeploy(apps[i]))
	}
	return apis
}

func appDeploy(a *models.Deploy, withStructs bool) *app.Deploy {
	if a == nil {
		return nil
	}
	deploy := &app.Deploy{}
		if withStructs {
					deploy.User = appUser(a.User)
		}
			deploy.ID = a.ID
			deploy.Config = a.Config
			deploy.CpuUnits = types.NewDecimal(a.CpuUnits)
			deploy.CreatedAt = (*time.Time)(a.CreatedAt)
			deploy.MemoryMb = a.MemoryMb
			deploy.Name = a.Name
			deploy.Price = types.NewDecimal(a.Price)
			deploy.State = a.State
			deploy.StorageMb = a.StorageMb
	
	return deploy
}

func appDeploys(apis []*models.Deploy, withStructs bool) []*app.Deploy {
	apps := []*app.Deploy{}
	for i := range apis {
		apps = append(apps, appDeploy(apis[i], withStructs))
	}
	return apps
}

func appDeployAdd(a *models.DeployAdd) *app.Deploy {
	if a == nil {
		return nil
	}
	deploy := &app.Deploy{}
			deploy.Config = a.Config
			deploy.CpuUnits = types.NewDecimal(a.CpuUnits)
			deploy.MemoryMb = a.MemoryMb
			deploy.Name = a.Name
			deploy.Price = types.NewDecimal(a.Price)
			deploy.State = a.State
			deploy.StorageMb = a.StorageMb
			if a.User != "" {
				deploy.User = &app.User{ID: a.User}
			}
	
	
	return deploy
}

func appDeploysAdd(apis []*models.DeployAdd) []*app.Deploy {
	apps := []*app.Deploy{}
	for i := range apis {
		apps = append(apps, appDeployAdd(apis[i]))
	}
	return apps
}
