
// Code generated by mtgroup-generator.
package dal

import (
	"time"
		"database/sql"
		"demo/internal/types"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

const (

	sqlGetTransaction = `
	SELECT
		id,
		amount,
		created_at,
		info,
		type,
		user_id
	FROM
		transactions
	WHERE
		id=:id AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`

	sqlGetMyTransactionID = `
	SELECT
		id
	FROM
		transactions
	WHERE
		created_by=:created_by AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted AND
		bound
	`


	sqlAddTransaction = `
	INSERT INTO transactions(
		amount,
		created_at,
		info,
		type,
		user_id,
		id,
		created_by,
		isolated_entity_id
	) VALUES (
		:amount,
		:created_at,
		:info,
		:type,
		:user_id,
		:id,
		:created_by,
		:isolated_entity_id
	)
	RETURNING
		id
	`

	sqlBindTransactionToProfile = `
	UPDATE
		transactions
	SET
		bound=true
	WHERE
		id=:id AND
		created_by=:created_by AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted AND
		NOT bound
	`

	sqlDeleteTransaction = `
	UPDATE
		transactions
	SET
		deleted=true,
		deleted_at=:deleted_at,
		deleted_by=:deleted_by
	WHERE
		id=:id AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`

	sqlEditTransaction = `
	UPDATE
		transactions
	SET
		amount=:amount,
		info=:info,
		type=:type,
		user_id=:user_id
	WHERE
		id=:id AND
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`
	
	sqlListTransaction = `
	SELECT
		id,
		amount,
		created_at,
		info,
		type,
		user_id
	FROM
		transactions
	WHERE
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`
	sqlListTransactionCount = `
	SELECT
		COUNT(*)
	FROM
		transactions
	WHERE
		isolated_entity_id=:isolated_entity_id AND
		NOT deleted
	`
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
					sqlGetUserForTransactionLazyLoading = `
	SELECT
		id,
		balance,
		name,
		role
	FROM
		users
	WHERE
		id=:id AND
		isolated_entity_id=:isolated_entity_id
	`
			
	
)

type (
    argGetTransaction struct {
        ID sql.NullString `db:"id"`
			IsolatedEntityID string `db:"isolated_entity_id"`
    }

	argGetMyTransactionID struct {
			CreatedBy string `db:"created_by"`
			IsolatedEntityID string `db:"isolated_entity_id"`
    }
	argAddTransaction struct {
							ID string `db:"id"`
							Amount types.Decimal `db:"amount"`
							CreatedAt *time.Time `db:"created_at"`
							Info string `db:"info"`
							Type string `db:"type"`
					UserID interface{} `db:"user_id"`
			CreatedBy string `db:"created_by"`
			IsolatedEntityID string `db:"isolated_entity_id"`
	}
	argBindTransactionToProfile struct {
		ID string `db:"id"`
			CreatedBy string `db:"created_by"`
			IsolatedEntityID string `db:"isolated_entity_id"`
	}
	argEditTransaction struct {
						ID string `db:"id"`
						Amount types.Decimal `db:"amount"`
						CreatedAt *time.Time `db:"created_at"`
						Info string `db:"info"`
						Type string `db:"type"`
					UserID interface{} `db:"user_id"`
			IsolatedEntityID string `db:"isolated_entity_id"`
	}
	argDeleteTransaction struct {
		ID string `db:"id"`
		DeletedAt *time.Time `db:"deleted_at"`
		DeletedBy string `db:"deleted_by"`
			IsolatedEntityID string `db:"isolated_entity_id"`
	}
)