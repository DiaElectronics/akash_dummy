
// Code generated by mtgroup-generator.
package dal

import (
	"database/sql"
	"strings"
	"time"
	"fmt"

	"demo/internal/app"
	"demo/internal/types"
	"github.com/google/uuid"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

type Deploy struct {
				ID uuid.UUID `db:"id"`
				Config sql.NullString `db:"config"`
				CpuUnits types.NullDecimal `db:"cpu_units"`
				CreatedAt *time.Time `db:"created_at"`
				MemoryMb sql.NullInt32 `db:"memory_mb"`
				Name sql.NullString `db:"name"`
				Price types.NullDecimal `db:"price"`
				State sql.NullString `db:"state"`
				StorageMb sql.NullInt32 `db:"storage_mb"`
			UserID sql.NullString `db:"user_id"`
		User User
}

var DeployProps = map[string]columnProps{
		"config": {
			sqlName:  "config",
			typeName: "string",
		},
		"cpuUnits": {
			sqlName:  "cpu_units",
			typeName: "decimal",
		},
		"createdAt": {
			sqlName:  "created_at",
			typeName: "date-time",
		},
		"id": {
			sqlName:  "id",
			typeName: "uuid",
		},
		"memoryMb": {
			sqlName:  "memory_mb",
			typeName: "int32",
		},
		"name": {
			sqlName:  "name",
			typeName: "string",
		},
		"price": {
			sqlName:  "price",
			typeName: "decimal",
		},
		"state": {
			sqlName:  "state",
			typeName: "string",
		},
		"storageMb": {
			sqlName:  "storage_mb",
			typeName: "int32",
		},
		"user": {
			sqlName:  "user_id",
			typeName: "uuid",
		},
}
	func (a *Repo) GetDeploy(id string, isolatedEntityID string) (*app.Deploy, error) {
			return a.getDeploy(id, isolatedEntityID)
	}

	func (a *Repo) AddDeploy(profileID string, isolatedEntityID string, m *app.Deploy) (*app.Deploy, error) {
		id, err := a.addDeploy(profileID, isolatedEntityID, m)
		if err != nil {
			return nil, err
		}
		return a.getDeploy(id, isolatedEntityID)
	}

	func (a *Repo) DeleteDeploy(id string, profileID string, isolatedEntityID string) error {
		t := time.Now()
		res, err := a.db.NamedExec(sqlDeleteDeploy, argDeleteDeploy{
			ID: id,
			DeletedAt: &t,
			DeletedBy: profileID,
				IsolatedEntityID: isolatedEntityID,
		})
		if err != nil {
			return err
		}
		if count, _ := res.RowsAffected(); count == 0 {
			return app.ErrNotFound
		}
		
		return nil
	}

	func (a *Repo) EditDeploy(id string, isolatedEntityID string, m *app.Deploy) (*app.Deploy, error)  {
			if err := a.editDeploy(id, isolatedEntityID, m); err != nil {
				return nil, err
			}
		

		return a.getDeploy(id, isolatedEntityID)
	}

	func (a *Repo) ListDeploy(isolatedEntityID string, params *app.ListParams) ([]*app.Deploy,  int,[]string, error) { 
		ms := []Deploy{}
		warnings := []string{}

		var orderQuery string
		switch params.SortBy {
						case "name":
							orderQuery = "ORDER BY name"
			case "":
			default:
				warnings = append(warnings, fmt.Sprintf("Sorting by '%s' is not avaliable or '%s' is not a valid sort key", params.SortBy, params.SortBy))
		}

		if orderQuery != "" {
			switch params.OrderBy {
			case "ASC", "":
				orderQuery += " ASC"
			case "DESC":
				orderQuery += " DESC"
			}
		}

		bf := newBuilderFilter(params.FilterGroups, DeployProps)

		sqlFilters, namedVars, warningsFromPrepared := bf.preparedSQLFilters()
		warnings = append(warnings, warningsFromPrepared...)

		
			namedVars["isolated_entity_id"] = isolatedEntityID
		

		var offset, limit string
			var count int
		var err error
		
			nestedFilterGroups := bf.nestedFilterGroups()
			
			externalPagination := false
			if len(nestedFilterGroups) != 0  {
				externalPagination = true
			}
			if !externalPagination {
					err = a.db.NamedGet(&count, sqlListDeployCount+sqlFilters, namedVars)
					if err != nil {
						return nil, -1, nil, err
					}
				offset = " OFFSET :offset"
				namedVars["offset"] = params.Offset
				if params.Limit != 0 {
					limit = " LIMIT :limit"
					namedVars["limit"] = params.Limit
				}
			}
		
		
		err = a.db.NamedSelect(&ms, sqlListDeploy+sqlFilters+orderQuery+offset+limit, namedVars)
		if err != nil {
			return nil, -1, nil, err
		}
		
		result := []Deploy{}
				for i := range ms {
					if err := ms[i].LazyLoading(isolatedEntityID, a); err != nil {
						return nil, -1, nil, err
					}

					ok := true 
					for j, filterGroup := range nestedFilterGroups {
						for _, filter := range filterGroup.Filters {
							var validFilter error
								ok, validFilter = ms[i].NestedFilter(filterGroup.Key, filter)
							if validFilter != nil {
								warnings = append(warnings, fmt.Sprintf("Filter key: '%s'. Error: %s", filterGroup.Key, validFilter.Error()))
								nestedFilterGroups = append(nestedFilterGroups[:j], nestedFilterGroups[j+1:]...)
								j--
							}
							if (!ok && filterGroup.LogicFilter) || (ok && !filterGroup.LogicFilter) {
								break
							}
						}
					}
					if ok {
						result = append(result, ms[i])
					}
				}

		
			if externalPagination {
					count = len(result)
				start, end := pagination(int(params.Offset), int(params.Limit), len(result))
				result = result[start:end]
			}
		

		return appDeploys(result), count, warnings, nil
	}

func (m *Deploy) LazyLoading(isolatedEntityID string, a *Repo) (err error) {
				if err = a.db.NamedGet(&m.User, sqlGetUserForDeployLazyLoading,  argGetUser{
					ID: m.UserID,
						IsolatedEntityID: isolatedEntityID, 
				}); err != nil && err != sql.ErrNoRows {
					return
				}
	return nil
}

func (a *Repo) getDeploy(id string, isolatedEntityID string) (*app.Deploy, error) { 
	var m Deploy
	if err := a.db.NamedGet(&m, sqlGetDeploy, argGetDeploy{
		ID: newNullUUID(id),
			IsolatedEntityID: isolatedEntityID, 
	}); err != nil {
		if err == sql.ErrNoRows {
			return nil, app.ErrNotFound
		} 
		return nil, err
	}
		if err := m.LazyLoading(isolatedEntityID, a); err != nil {
			return nil, err
		}
	return appDeploy(m), nil
}

func (a *Repo) addDeploy(profileID string, isolatedEntityID string, m *app.Deploy) (string, error) {
		DeployID := uuid.New().String()
		t := time.Now()
		m.CreatedAt = &t
			var userID interface{}
			if m.User != nil {
				userID = m.User.ID
			}
	if err := a.db.NamedGet(&DeployID, sqlAddDeploy, argAddDeploy{
			ID: DeployID,
							Config: m.Config,
							CpuUnits: m.CpuUnits,
							CreatedAt: m.CreatedAt,
							MemoryMb: m.MemoryMb,
							Name: m.Name,
							Price: m.Price,
							State: m.State,
							StorageMb: m.StorageMb,
					UserID: userID,
			CreatedBy: profileID,
			IsolatedEntityID: isolatedEntityID,
	}); err != nil {
		if strings.Contains(err.Error(), "duplicate key value violates unique constraint") {
			return "", app.ErrDuplicateID
		}
		return "", err
	}
	return DeployID, nil
}

func (a *Repo) getMyDeployID(profileID, isolatedEntityID string) (id string, err error) {
	if err = a.db.NamedGet(&id, sqlGetMyDeployID, argGetMyDeployID{
			CreatedBy: profileID,
			IsolatedEntityID: isolatedEntityID,
	}); err != nil {
		if err == sql.ErrNoRows {
			return "", app.ErrNotFound
		}
		return
	}
	return
}

func (a *Repo) bindToProfileDeploy(id, profileID, isolatedEntityID string) error {
	res, err := a.db.NamedExec(sqlBindDeployToProfile, argBindDeployToProfile{
		ID: id,
			CreatedBy: profileID,
			IsolatedEntityID: isolatedEntityID,
	})
	if err != nil {
		return err
	}

	if count, _ := res.RowsAffected(); count == 0 {
		return app.ErrNotFound
	}
	return nil
}

func (a *Repo) editDeploy(id string, isolatedEntityID string, m *app.Deploy) error  {
			var userID interface{}
			if m.User != nil {
				userID = m.User.ID
			}

	res, err := a.db.NamedExec(sqlEditDeploy, argEditDeploy{
							ID: id,
							Config: m.Config,
							CpuUnits: m.CpuUnits,
							CreatedAt: m.CreatedAt,
							MemoryMb: m.MemoryMb,
							Name: m.Name,
							Price: m.Price,
							State: m.State,
							StorageMb: m.StorageMb,
					UserID: userID,
			IsolatedEntityID: isolatedEntityID,
	})
	if err != nil {
		return err
	}

	if count, _ := res.RowsAffected(); count == 0 {
			return app.ErrNotFound
	}

	return nil
}
func (m *Deploy) NestedFilter(key string, filter *app.Filter) (ok bool, err error) {
	if strings.Contains(key, ".") {
		splitedFilter := strings.SplitN(key, ".", 2)
		key = splitedFilter[1]
		switch splitedFilter[0] {
			case "user":
					ok, err = m.User.Filter(key, filter)
		default:
			ok, err = true, errNotExistFilterKey
		}
	} else {
		ok, err = m.Filter(key, filter)
	}
	return
}

func (m *Deploy) Filter(key string, filter *app.Filter) (ok bool, err error) {
	columnType := DeployProps[key].typeName
	if err = validateOperator(filter.Operator, columnType); err != nil {
		return true, err
	}
	if err = vaidateIgnoreCase(filter.IgnoreCase, columnType); err != nil {
		return true, err
	}
	if err := validateValue(filter.Value, columnType); err != nil {
		return true, err
	}
	switch key {
			case "id":
						ok = compareUUID(filter.Operator, m.ID, filter.Value)
			case "config":
						ok = compareString(filter.Operator, filter.IgnoreCase, m.Config.String, filter.Value)
			case "cpuUnits":
						ok = compareDecimal(filter.Operator,  m.CpuUnits.Decimal, filter.Value)
			case "createdAt":
						ok = compareTime(filter.Operator, *m.CreatedAt, filter.Value)
			case "memoryMb":
						ok = compareInt64(filter.Operator, int64(m.MemoryMb.Int32), filter.Value)
			case "name":
						ok = compareString(filter.Operator, filter.IgnoreCase, m.Name.String, filter.Value)
			case "price":
						ok = compareDecimal(filter.Operator,  m.Price.Decimal, filter.Value)
			case "state":
						ok = compareString(filter.Operator, filter.IgnoreCase, m.State.String, filter.Value)
			case "storageMb":
						ok = compareInt64(filter.Operator, int64(m.StorageMb.Int32), filter.Value)
	default:
		ok, err = true, errNotExistFilterKey
	}
	return
}

func appDeploy(m Deploy) *app.Deploy {
	if m.ID.String() == "00000000-0000-0000-0000-000000000000" {
		return nil
	}
	return &app.Deploy{
			ID: m.ID.String(),
			Config: m.Config.String,
			CpuUnits: m.CpuUnits.Decimal,
			CreatedAt: m.CreatedAt,
			MemoryMb: m.MemoryMb.Int32,
			Name: m.Name.String,
			Price: m.Price.Decimal,
			State: m.State.String,
			StorageMb: m.StorageMb.Int32,
			User: appUser(m.User),
	}
}

func appDeploys(ms []Deploy) []*app.Deploy {
	ams := []*app.Deploy{}
	for _, m := range ms {
		ams = append(ams, appDeploy(m))
	}

	return ams
}
